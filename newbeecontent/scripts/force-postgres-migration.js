#!/usr/bin/env node

/**
 * Script para for√ßar aplica√ß√£o das migrations PostgreSQL em produ√ß√£o
 * Este script deve ser executado quando h√° problemas de sincroniza√ß√£o de schema
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß For√ßando aplica√ß√£o das migrations PostgreSQL...');

// 1. Configurar schema para PostgreSQL
console.log('üìù Configurando schema para PostgreSQL...');
execSync('node scripts/setup-production-schema.js', { stdio: 'inherit' });

// 2. Resetar estado das migrations
console.log('üîÑ Resetando estado das migrations...');
try {
  execSync('npx prisma migrate reset --force', { stdio: 'inherit' });
  console.log('‚úÖ Estado das migrations resetado!');
} catch (error) {
  console.log('‚ö†Ô∏è  Erro ao resetar migrations, continuando...');
}

// 3. Aplicar todas as migrations
console.log('üì¶ Aplicando todas as migrations...');
try {
  execSync('npx prisma migrate deploy', { stdio: 'inherit' });
  console.log('‚úÖ Migrations aplicadas com sucesso!');
} catch (error) {
  console.log('‚ö†Ô∏è  Erro ao aplicar migrations, tentando db push...');
  try {
    execSync('npx prisma db push --force-reset', { stdio: 'inherit' });
    console.log('‚úÖ Schema sincronizado com db push!');
  } catch (pushError) {
    console.error('‚ùå Erro ao sincronizar banco:', pushError.message);
    process.exit(1);
  }
}

// 4. Gerar Prisma Client
console.log('‚ö° Gerando Prisma Client...');
execSync('npx prisma generate', { stdio: 'inherit' });

// 5. Verificar se a coluna existe
console.log('üîç Verificando estrutura da tabela Hotel...');
try {
  const { PrismaClient } = require('@prisma/client');
  const prisma = new PrismaClient();
  
  // Tentar fazer uma query que usa a coluna nextScheduledAt
  const testQuery = `
    SELECT column_name 
    FROM information_schema.columns 
    WHERE table_name = 'Hotel' AND column_name = 'nextScheduledAt'
  `;
  
  console.log('üìã Executando verifica√ß√£o de schema...');
  // Esta verifica√ß√£o ser√° feita no runtime
  console.log('‚úÖ Script de verifica√ß√£o preparado!');
  
} catch (error) {
  console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar o schema:', error.message);
}

console.log('üéâ Processo de migra√ß√£o for√ßada conclu√≠do!');
console.log('üí° Execute este script em produ√ß√£o para resolver problemas de schema.');