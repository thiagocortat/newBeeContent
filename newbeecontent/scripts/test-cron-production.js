#!/usr/bin/env node

const https = require('https')
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function testCronProduction() {
  console.log('üîç Testando Cron Job em Produ√ß√£o\n')
  
  try {
    // 1. Verificar logs de automa√ß√£o recentes
    console.log('1Ô∏è‚É£ Verificando logs de automa√ß√£o recentes...')
    const recentLogs = await prisma.automationLog.findMany({
      orderBy: { createdAt: 'desc' },
      take: 10,
      include: {
        hotel: {
          select: { name: true }
        }
      }
    })
    
    if (recentLogs.length === 0) {
      console.log('   ‚ùå Nenhum log de automa√ß√£o encontrado!')
      console.log('   üîç Isso indica que o cron job nunca foi executado em produ√ß√£o')
    } else {
      console.log(`   üìä ${recentLogs.length} logs encontrados:`)
      recentLogs.forEach((log, index) => {
        console.log(`   ${index + 1}. ${log.createdAt.toISOString()} - ${log.hotel?.name || 'Hotel n√£o encontrado'} - ${log.status}`)
        if (log.message) {
          console.log(`      üìù Mensagem: ${log.message}`)
        }
      })
    }
    
    // 2. Verificar configura√ß√£o do hotel
    console.log('\n2Ô∏è‚É£ Verificando configura√ß√£o atual do hotel...')
    const hotel = await prisma.hotel.findFirst({
      where: { autoGeneratePosts: true }
    })
    
    if (hotel) {
      console.log(`   üè® Hotel: ${hotel.name}`)
      console.log(`   üîÑ Automa√ß√£o ativa: ${hotel.autoGeneratePosts ? '‚úÖ' : '‚ùå'}`)
      console.log(`   üìÖ √öltimo post autom√°tico: ${hotel.lastAutoPostAt || 'Nunca'}`)
      console.log(`   üìä Frequ√™ncia: ${hotel.postFrequency}`)
      console.log(`   üìà Limite mensal: ${hotel.maxMonthlyPosts || 'Sem limite'}`)
      console.log(`   ‚è∞ Pr√≥ximo agendamento: ${hotel.nextScheduledAt || 'N√£o definido'}`)
    }
    
    // 3. Verificar posts criados hoje
    console.log('\n3Ô∏è‚É£ Verificando posts criados hoje...')
    const today = new Date()
    today.setHours(0, 0, 0, 0)
    const tomorrow = new Date(today)
    tomorrow.setDate(tomorrow.getDate() + 1)
    
    const postsToday = await prisma.post.findMany({
      where: {
        publishedAt: {
          gte: today,
          lt: tomorrow
        }
      },
      include: {
        hotel: {
          select: { name: true }
        },
        author: {
          select: { email: true }
        }
      },
      orderBy: { publishedAt: 'desc' }
    })
    
    console.log(`   üìù ${postsToday.length} posts criados hoje:`)
    postsToday.forEach((post, index) => {
      console.log(`   ${index + 1}. "${post.title}" - ${post.hotel?.name} - ${post.publishedAt.toLocaleTimeString('pt-BR')}`)
    })
    
    // 4. Verificar vari√°veis de ambiente cr√≠ticas
    console.log('\n4Ô∏è‚É£ Verificando vari√°veis de ambiente...')
    const requiredEnvs = ['DATABASE_URL', 'GROQ_API_KEY', 'RUNWARE_API_KEY']
    requiredEnvs.forEach(env => {
      const value = process.env[env]
      if (value) {
        console.log(`   ‚úÖ ${env}: Configurada (${value.substring(0, 20)}...)`)
      } else {
        console.log(`   ‚ùå ${env}: N√ÉO CONFIGURADA`)
      }
    })
    
    // 5. An√°lise e recomenda√ß√µes
    console.log('\nüìã AN√ÅLISE E RECOMENDA√á√ïES:')
    
    if (recentLogs.length === 0) {
      console.log('\nüö® PROBLEMA IDENTIFICADO: Cron job nunca foi executado')
      console.log('\nüîß POSS√çVEIS CAUSAS:')
      console.log('1. Cron job n√£o est√° configurado corretamente no Vercel')
      console.log('2. Fun√ß√£o de cron est√° falhando silenciosamente')
      console.log('3. Timezone do cron job pode estar incorreto')
      console.log('4. Fun√ß√£o pode estar sendo bloqueada por timeout')
      
      console.log('\n‚úÖ SOLU√á√ïES RECOMENDADAS:')
      console.log('1. Verificar configura√ß√£o do vercel.json')
      console.log('2. Verificar logs do Vercel Functions')
      console.log('3. Testar manualmente a API /api/cron')
      console.log('4. Adicionar logs de debug na fun√ß√£o de cron')
      console.log('5. Verificar se o deploy incluiu o vercel.json')
    } else {
      const lastLog = recentLogs[0]
      const hoursSinceLastRun = (new Date() - lastLog.createdAt) / (1000 * 60 * 60)
      
      if (hoursSinceLastRun > 25) { // Mais de 25 horas (deveria rodar diariamente)
        console.log(`\n‚ö†Ô∏è ATEN√á√ÉO: √öltima execu√ß√£o foi h√° ${hoursSinceLastRun.toFixed(1)} horas`)
        console.log('   O cron job deveria executar diariamente √†s 9h')
      } else {
        console.log('\n‚úÖ Cron job est√° executando regularmente')
      }
      
      const errorLogs = recentLogs.filter(log => log.status === 'error')
      if (errorLogs.length > 0) {
        console.log(`\n‚ùå ${errorLogs.length} erros encontrados nos logs recentes`)
        errorLogs.forEach(log => {
          console.log(`   - ${log.message}`)
        })
      }
    }
    
    // 6. Status final
    console.log('\nüéØ STATUS FINAL DA AUTOMA√á√ÉO:')
    if (recentLogs.length > 0 && hotel && hotel.autoGeneratePosts) {
      console.log('‚úÖ Automa√ß√£o est√° configurada e executando')
    } else if (hotel && hotel.autoGeneratePosts && recentLogs.length === 0) {
      console.log('‚ö†Ô∏è Automa√ß√£o est√° configurada mas nunca executou')
    } else {
      console.log('‚ùå Automa√ß√£o n√£o est√° funcionando corretamente')
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante an√°lise:', error)
  } finally {
    await prisma.$disconnect()
  }
}

if (require.main === module) {
  testCronProduction()
}

module.exports = { testCronProduction }