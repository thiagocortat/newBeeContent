#!/usr/bin/env node

/**
 * Script para testar configura√ß√µes antes do deploy
 */

const fs = require('fs')
const path = require('path')

console.log('üîç Verificando configura√ß√µes para deploy...\n')

// 1. Verificar se .env existe
const envPath = path.join(__dirname, '../.env')
if (fs.existsSync(envPath)) {
  console.log('‚úÖ Arquivo .env encontrado')
} else {
  console.log('‚ùå Arquivo .env n√£o encontrado')
  console.log('   Crie um arquivo .env baseado no .env.example')
}

// 2. Verificar vercel.json
const vercelPath = path.join(__dirname, '../vercel.json')
if (fs.existsSync(vercelPath)) {
  try {
    const vercelConfig = JSON.parse(fs.readFileSync(vercelPath, 'utf8'))
    console.log('‚úÖ vercel.json v√°lido')
    
    if (vercelConfig.cron) {
      console.log('‚ö†Ô∏è  Propriedade "cron" encontrada no vercel.json')
      console.log('   Esta propriedade n√£o √© suportada. Use Vercel Cron Jobs.')
    }
  } catch (error) {
    console.log('‚ùå vercel.json inv√°lido:', error.message)
  }
} else {
  console.log('‚úÖ vercel.json n√£o encontrado (opcional)')
}

// 3. Verificar package.json
const packagePath = path.join(__dirname, '../package.json')
if (fs.existsSync(packagePath)) {
  try {
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'))
    console.log('‚úÖ package.json v√°lido')
    
    if (packageJson.scripts && packageJson.scripts.build) {
      console.log('‚úÖ Script de build encontrado')
    } else {
      console.log('‚ùå Script de build n√£o encontrado')
    }
  } catch (error) {
    console.log('‚ùå package.json inv√°lido:', error.message)
  }
}

// 4. Verificar middleware
const middlewarePath = path.join(__dirname, '../middleware.ts')
if (fs.existsSync(middlewarePath)) {
  const middlewareContent = fs.readFileSync(middlewarePath, 'utf8')
  if (middlewareContent.includes('customDomain')) {
    console.log('‚úÖ Middleware configurado para multi-tenant')
  } else {
    console.log('‚ö†Ô∏è  Middleware pode n√£o estar configurado para dom√≠nios pr√≥prios')
  }
} else {
  console.log('‚ùå middleware.ts n√£o encontrado')
}

// 5. Verificar schema do Prisma
const schemaPath = path.join(__dirname, '../prisma/schema.prisma')
if (fs.existsSync(schemaPath)) {
  const schemaContent = fs.readFileSync(schemaPath, 'utf8')
  if (schemaContent.includes('customDomain')) {
    console.log('‚úÖ Schema do Prisma tem campo customDomain')
  } else {
    console.log('‚ùå Campo customDomain n√£o encontrado no schema')
  }
} else {
  console.log('‚ùå Schema do Prisma n√£o encontrado')
}

console.log('\nüöÄ Verifica√ß√£o conclu√≠da!')
console.log('\nüìã Pr√≥ximos passos para deploy:')
console.log('1. Configure as vari√°veis de ambiente no Vercel')
console.log('2. Execute: npx vercel --prod')
console.log('3. Configure os dom√≠nios no painel da Vercel')
console.log('4. Teste com: https://seudominio.com.br/blog')